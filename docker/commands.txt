            ************** Basic docker commands *************

#### steps 1.maven build and create jar file 2.then you build image from that jar file 3.and then you run container of that image
docker images  / docker image ls
docker ps
docker build -t imageName .   // run this command in the directory where there is dockerfile from where it reads the jarfile name
docker run -p 9090:8080 imageName
docker stop containerId

to deploy a docker image to docker hub, first add the tag and then deploy it using the following commands.
*docker tag imageName tagName/imageName   e.g
 docker tag docker-example.jar 333991jan/docker-example.jar
 To verify it use the command "docker image ls" and you will see your image with the tag  e.g 333991jan/docker-example.jar

Now the next step is to push this image to docker Hub......
*docker push tageName/imageName e.g
 docker push 333991jan/docker-example.jar


DELETE : to delete all images
command for windows : for /F %i in ('docker images -a -q') do docker rmi -f %i


To run mysql image,first pull it from the server
docker pull mysql
docker run -p 3307:3306 --name containername -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=bank mysql:latest


docker network :
commands : docker network create networkName  -->>to create a network
           docker network inspect networkid   -->>to inspect network
           docker network ls  -->> to list all the networks

Now connect the mysql container running to this network and then connect crud spring application to this network
          
            docker network connect networkName mysqlContainerName   e.g
            docker network connect firstnetwork mysqlcontainer

 now to check if the container got connected to the network run this command
            docker network inspect networkName

Now we connect and run our spring application to this network using this command
docker run -p 9090:8080 --name choseContainerNameForSpringApp --net networkName -e MYSQL_HOST=mysqlContainerNameHere -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_PORT=3306 springImageName 
     e.g
docker run -p 9090:8080 --name bank-app --net firtnetwork -e MYSQL_HOST=mysqlcontainer -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_PORT=3306 bank-app
 
it will connect and run our application to the mysql container instance already running. so now you can use postman to test all ur APIs
       e.g    ----->>>   http://localhost:9090/account/add
This is one way of doing this. the other way is to create a docker-compose.yml file and add two services to it one for spring-boot application and one for mysql db as from the video(girl's video) with link :
https://www.youtube.com/watch?v=DwWkjEwsI4Q
and use the command : docker-compose up but before create the docker image using the docker build command after that use docker-compose up command


To access you APIs on docker container use the following host
       http://host.docker.internal:8080/course/all
